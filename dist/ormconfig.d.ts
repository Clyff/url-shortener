/// <reference types="node" />
declare const _default: {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "mysql" | "mariadb";
    charset?: string;
    timezone?: string;
    connectTimeout?: number;
    acquireTimeout?: number;
    insecureAuth?: boolean;
    supportBigNumbers?: boolean;
    bigNumberStrings?: boolean;
    dateStrings?: boolean | string[];
    debug?: boolean | string[];
    trace?: boolean;
    multipleStatements?: boolean;
    legacySpatialSupport?: boolean;
    flags?: string[];
    replication?: {
        readonly master: import("typeorm/driver/mysql/MysqlConnectionCredentialsOptions").MysqlConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/mysql/MysqlConnectionCredentialsOptions").MysqlConnectionCredentialsOptions[];
        readonly canRetry?: boolean;
        readonly removeNodeErrorCount?: number;
        readonly restoreNodeTimeout?: number;
        readonly selector?: "RR" | "RANDOM" | "ORDER";
    };
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    ssl?: any;
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "postgres";
    schema?: string;
    useUTC?: boolean;
    replication?: {
        readonly master: import("typeorm/driver/postgres/PostgresConnectionCredentialsOptions").PostgresConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/postgres/PostgresConnectionCredentialsOptions").PostgresConnectionCredentialsOptions[];
    };
    connectTimeoutMS?: number;
    uuidExtension?: "pgcrypto" | "uuid-ossp";
    poolErrorHandler?: (err: any) => any;
    logNotifications?: boolean;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string | (() => string) | (() => Promise<string>);
    database?: string;
    ssl?: boolean | import("tls").TlsOptions;
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "cockroachdb";
    schema?: string;
    replication?: {
        readonly master: import("typeorm/driver/cockroachdb/CockroachConnectionCredentialsOptions").CockroachConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/cockroachdb/CockroachConnectionCredentialsOptions").CockroachConnectionCredentialsOptions[];
    };
    poolErrorHandler?: (err: any) => any;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    ssl?: boolean | import("tls").TlsOptions;
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "sqlite";
    database?: string;
    key?: string;
    busyErrorRetry?: number;
    enableWAL?: boolean;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "mssql";
    connectionTimeout?: number;
    requestTimeout?: number;
    stream?: boolean;
    schema?: string;
    pool?: {
        readonly max?: number;
        readonly min?: number;
        readonly maxWaitingClients?: number;
        readonly testOnBorrow?: boolean;
        readonly acquireTimeoutMillis?: number;
        readonly fifo?: boolean;
        readonly priorityRange?: number;
        readonly autostart?: number;
        readonly evictionRunIntervalMillis?: number;
        readonly numTestsPerRun?: number;
        readonly softIdleTimeoutMillis?: number;
        readonly idleTimeoutMillis?: number;
        readonly errorHandler?: (err: any) => any;
    };
    options?: {
        readonly fallbackToDefaultDb?: boolean;
        readonly enableAnsiNullDefault?: boolean;
        readonly connectTimeout?: number;
        readonly cancelTimeout?: number;
        readonly packetSize?: number;
        readonly useUTC?: boolean;
        readonly abortTransactionOnError?: boolean;
        readonly localAddress?: string;
        readonly useColumnNames?: boolean;
        readonly camelCaseColumns?: boolean;
        readonly disableOutputReturning?: boolean;
        readonly debug?: {
            readonly packet?: boolean;
            readonly data?: boolean;
            readonly payload?: boolean;
            readonly token?: boolean;
        };
        readonly isolation?: "READ_UNCOMMITTED" | "READ_COMMITTED" | "REPEATABLE_READ" | "SERIALIZABLE" | "SNAPSHOT";
        readonly connectionIsolationLevel?: "READ_UNCOMMITTED" | "READ_COMMITTED" | "REPEATABLE_READ" | "SERIALIZABLE" | "SNAPSHOT";
        readonly readOnlyIntent?: boolean;
        readonly encrypt?: boolean;
        readonly cryptoCredentialsDetails?: any;
        readonly rowCollectionOnDone?: boolean;
        readonly rowCollectionOnRequestCompletion?: boolean;
        readonly tdsVersion?: string;
        readonly enableArithAbort?: boolean;
    };
    replication?: {
        readonly master: import("typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions").SqlServerConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions").SqlServerConnectionCredentialsOptions[];
    };
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    domain?: string;
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "sap";
    schema?: string;
    pool?: {
        readonly max?: number;
        readonly min?: number;
        readonly maxWaitingRequests?: number;
        readonly requestTimeout?: number;
        readonly checkInterval?: number;
        readonly idleTimeout?: number;
        readonly poolErrorHandler?: (err: any) => any;
    };
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    encrypt?: boolean;
    sslValidateCertificate?: boolean;
    key?: string;
    cert?: string;
    ca?: string;
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "oracle";
    schema?: string;
    useUTC?: boolean;
    replication?: {
        readonly master: import("typeorm/driver/oracle/OracleConnectionCredentialsOptions").OracleConnectionCredentialsOptions;
        readonly slaves: import("typeorm/driver/oracle/OracleConnectionCredentialsOptions").OracleConnectionCredentialsOptions[];
    };
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    sid?: string;
    connectString?: string;
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "cordova";
    database?: string;
    location?: string;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "nativescript";
    database?: string;
    driver?: any;
    readOnly?: boolean;
    key?: string;
    multithreading?: boolean;
    migrate?: boolean;
    iosFlags?: number;
    androidFlags?: number;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "react-native";
    database?: string;
    location?: string;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "sqljs";
    database?: Uint8Array;
    sqlJsConfig?: any;
    autoSave?: boolean;
    autoSaveCallback?: Function;
    location?: string;
    useLocalForage?: boolean;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "mongodb";
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    database?: string;
    poolSize?: number;
    ssl?: boolean;
    sslValidate?: boolean;
    sslCA?: string[] | Buffer[];
    sslCert?: string | Buffer;
    sslKey?: string;
    sslPass?: string | Buffer;
    sslCRL?: string | Buffer;
    autoReconnect?: boolean;
    noDelay?: boolean;
    keepAlive?: number;
    connectTimeoutMS?: number;
    family?: number;
    socketTimeoutMS?: number;
    reconnectTries?: number;
    reconnectInterval?: number;
    ha?: boolean;
    haInterval?: number;
    replicaSet?: string;
    acceptableLatencyMS?: number;
    secondaryAcceptableLatencyMS?: number;
    connectWithNoPrimary?: boolean;
    authSource?: string;
    w?: string | number;
    wtimeout?: number;
    j?: boolean;
    forceServerObjectId?: boolean;
    serializeFunctions?: boolean;
    ignoreUndefined?: boolean;
    raw?: boolean;
    promoteLongs?: boolean;
    promoteBuffers?: boolean;
    promoteValues?: boolean;
    domainsEnabled?: boolean;
    bufferMaxEntries?: number;
    readPreference?: string | import("typeorm").ReadPreference;
    pkFactory?: any;
    promiseLibrary?: any;
    readConcern?: any;
    maxStalenessSeconds?: number;
    loggerLevel?: "debug" | "error" | "warn" | "info";
    checkServerIdentity?: boolean | Function;
    validateOptions?: any;
    appname?: string;
    authMechanism?: string;
    compression?: any;
    fsync?: boolean;
    readPreferenceTags?: any[];
    numberOfRetries?: number;
    auto_reconnect?: boolean;
    monitorCommands?: boolean;
    minSize?: number;
    useNewUrlParser?: boolean;
    useUnifiedTopology?: boolean;
    autoEncryption?: any;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "aurora-data-api";
    region?: string;
    secretArn?: string;
    resourceArn?: string;
    database?: string;
    serviceConfigOptions?: {
        [key: string]: any;
    };
    formatOptions?: {
        [key: string]: any;
    };
    legacySpatialSupport?: boolean;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
    url?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    ssl?: any;
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "aurora-data-api-pg";
    region?: string;
    secretArn?: string;
    resourceArn?: string;
    database?: string;
    uuidExtension?: "pgcrypto" | "uuid-ossp";
    poolErrorHandler?: (err: any) => any;
    serviceConfigOptions?: {
        [key: string]: any;
    };
    formatOptions?: {
        [key: string]: any;
    };
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "expo";
    database?: string;
    driver?: any;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
} | {
    migrations: string[];
    entities: string[];
    cli: {
        migrationsDir: string;
    };
    retryAttempts?: number;
    retryDelay?: number;
    toRetry?: (err: any) => boolean;
    autoLoadEntities?: boolean;
    keepConnectionAlive?: boolean;
    verboseRetryLog?: boolean;
    type?: "better-sqlite3";
    database?: string;
    key?: string;
    statementCacheSize?: number;
    prepareDatabase?: (db: any) => void | Promise<void>;
    readonly?: boolean;
    fileMustExist?: boolean;
    timeout?: number;
    verbose?: Function;
    name?: string;
    subscribers?: (string | Function)[];
    migrationsTableName?: string;
    migrationsTransactionMode?: "all" | "none" | "each";
    namingStrategy?: import("typeorm").NamingStrategyInterface;
    logging?: import("typeorm").LoggerOptions;
    logger?: "debug" | "advanced-console" | "simple-console" | "file" | import("typeorm").Logger;
    maxQueryExecutionTime?: number;
    synchronize?: boolean;
    migrationsRun?: boolean;
    dropSchema?: boolean;
    entityPrefix?: string;
    extra?: any;
    cache?: boolean | {
        readonly type?: "database" | "redis" | "ioredis" | "ioredis/cluster";
        readonly provider?: (connection: import("typeorm").Connection) => import("typeorm/cache/QueryResultCache").QueryResultCache;
        readonly tableName?: string;
        readonly options?: any;
        readonly alwaysEnabled?: boolean;
        readonly duration?: number;
    };
};
export = _default;
